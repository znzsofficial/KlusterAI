// Json 实例，用于序列化请求体
// encodeDefaults = false: 如果属性值等于其在数据类中定义的默认值，则不序列化该属性。
// 对于可选参数，通常在数据类中将它们设为可空并默认值为 null。
// kotlinx.serialization 默认不序列化值为 null 的属性 (除非 explicitNulls = true)。
private val jsonRequestBuilder = Json {
    prettyPrint = false // API 请求通常不需要美化打印
    encodeDefaults = false // 重要：如果属性值等于其默认值，则不序列化。
    ignoreUnknownKeys = true // 解析响应时仍然有用（虽然这里主要用于序列化）
    isLenient = true         // 增加对不严格JSON格式的容忍度（对请求体影响较小）
}

suspend fun callLLMApi(
    apiKey: String,
    modelApiName: String,
    currentHistory: List<MessageData>, // 接收你的内部 MessageData 列表
    settings: ModelSettings,         // 接收包含所有模型参数的 ModelSettings 对象
    onChunkReceived: (String) -> Unit // 用于流式输出的回调
): String? = withContext(Dispatchers.IO) {
    if (apiKey.isBlank()) {
        throw IOException("API 密钥为空。请在设置中配置API密钥。")
    }

    // 1. 将内部的 MessageData 列表转换为 API 请求所需的 ApiRequestMessage 列表
    val apiMessages = currentHistory
        .filterNot { it.role == "system" && it.content.isBlank() } // 不发送空白的系统消息
        .filter { it.role == "system" || it.role == "user" || it.role == "assistant" } // 确保角色有效
        .map { msg -> ApiRequestMessage(role = msg.role, content = msg.content) }

    // 2. 检查转换后的消息列表是否有效
    //    API 通常要求 'messages' 列表不能为空，或者至少包含一个用户消息。
    //    如果只有系统消息，某些 API 可能允许，某些可能不允许。
    //    你需要根据你使用的 API 的具体要求来调整这里的逻辑。
    //    例如，如果API要求至少有一个 'user' 角色的消息（除非是对话的开始，只有system prompt）：
    if (apiMessages.isEmpty() || (apiMessages.none { it.role == "user" } && apiMessages.any { it.role == "system" } && apiMessages.size == apiMessages.count { it.role == "system" } ) ) {
        // 如果 apiMessages 为空，或者所有消息都是系统消息且没有用户消息。
        // （此条件可能需要根据API的具体要求调整，例如是否允许仅发送一个非空的系统消息）
        // 一个更简单的检查可能是：如果 apiMessages 为空，或者所有消息的角色都不是 "user"。
        if (apiMessages.none { it.role == "user" } && apiMessages.isNotEmpty()) {
             // 如果没有用户消息，但有系统/助手消息，某些API可能仍然不允许。
             // 这里的逻辑是：如果没有用户消息，且列表不为空（意味着只有系统/助手消息），我们也不发送。
             // 如果你的API允许以一个非空系统消息开始对话，则需要修改此条件。
             // **或者，一个更通用的检查：如果 `apiMessages` 为空，就直接报错或返回。**
        }
        if (apiMessages.isEmpty()) { // 简化检查：如果过滤后没有可发送的消息
             throw IOException("没有有效的消息可以发送到API。")
        }
    }


    // 3. 构建 ApiRequestBody 对象
    //    对于可选参数，如果它们的值应该让API使用其默认值，则在ApiRequestBody中将它们设为null。
    //    `jsonRequestBuilder` (配置了 encodeDefaults = false 或默认不序列化 null) 会处理不发送这些字段。
    val requestBody = ApiRequestBody(
        model = modelApiName,
        messages = apiMessages,
        stream = true, // 通常总是 true 以支持流式输出
        temperature = if (settings.temperature != ModelSettings.DEFAULT.temperature) settings.temperature else null,
        frequencyPenalty = if (settings.frequencyPenalty != ModelSettings.DEFAULT.frequencyPenalty) settings.frequencyPenalty else null,
        topP = if (settings.topP < 1.0f && settings.topP != ModelSettings.DEFAULT.topP) settings.topP else null // 仅当 topP < 1.0 且非默认值时发送
        // maxTokens = settings.maxTokens // 如果添加了 maxTokens
    )
    // 条件 `settings.parameter != ModelSettings.DEFAULT.parameter` 是一种策略，
    // 意在只有当用户显式设置了与我们定义的“程序默认值”不同的值时才发送该参数。
    // 如果你想总是发送用户在UI上设置的值（即使它等于程序默认值），可以直接使用 `settings.parameter`。
    // 将其设为 null 的目的是让 API 使用它自己的默认值（如果我们的程序默认值和API默认值一致的话）。
    // 或者，如果某个参数设为 null 在 API 那里有特殊含义（比如“不启用”），这也是一种方法。

    // 4. 将请求对象序列化为 JSON 字符串
    val payloadString: String
    try {
        payloadString = jsonRequestBuilder.encodeToString(requestBody)
        // println("API Request Payload: $payloadString") // 打开此行用于调试，查看发送的JSON
    } catch (e: Exception) {
        println("序列化API请求体时出错: ${e.message}")
        e.printStackTrace()
        throw IOException("无法构建API请求: ${e.message}", e)
    }

    // 5. 构建 OkHttp Request
    val request = Request.Builder()
        .url(API_URL) // 确保 API_URL 是正确的常量
        .header("Authorization", "Bearer $apiKey")
        .header("Content-Type", "application/json")
        .post(payloadString.toRequestBody("application/json".toMediaTypeOrNull()))
        .build()

    // 6. 执行请求并处理响应 (与之前相同)
    val fullResponseBuilder = StringBuilder()
    try {
        okHttpClient.newCall(request).execute().use { response ->
            if (!response.isSuccessful) {
                val errorBody = response.body?.string() ?: "无详细错误信息"
                throw IOException("API请求失败 (${response.code}): $errorBody")
            }
            val source = response.body?.source() ?: throw IOException("响应体为空")

            while (!source.exhausted()) {
                val line = source.readUtf8Line()
                if (line != null) {
                    if (line.startsWith("data: ")) {
                        val jsonData = line.substringAfter("data: ").trim()
                        if (jsonData.equals("[DONE]", ignoreCase = true)) {
                            break
                        }
                        if (jsonData.isNotBlank()) {
                            // extractContent 函数仍然用于解析流中的每一块 JSON 数据
                            extractContent(jsonData)?.let { contentChunk ->
                                onChunkReceived(contentChunk)
                                fullResponseBuilder.append(contentChunk)
                            }
                        }
                    } else if (line.trim().startsWith("{")) { // 处理非data:开头的JSON行
                        extractContent(line)?.let { contentChunk ->
                            onChunkReceived(contentChunk)
                            fullResponseBuilder.append(contentChunk)
                        }
                    }
                }
            }
            return@withContext if (fullResponseBuilder.isNotEmpty()) fullResponseBuilder.toString() else null
        }
    } catch (e: IOException) {
        println("网络请求或IO错误: ${e.message}")
        throw e
    } catch (e: Exception) {
        println("处理API响应时发生未知错误: ${e.message}")
        e.printStackTrace()
        throw IOException("处理API响应时发生错误: ${e.message}", e)
    }
}


//fun extractContent(input: String): String? {
//    return try {
//        val lines = input.lines().filter { it.isNotBlank() }
//        for (line in lines) {
//            try {
//                val jsonObject = JSONObject(line)
//                if (jsonObject.has("choices")) {
//                    val choicesArray = jsonObject.getJSONArray("choices")
//                    if (choicesArray.length() > 0) {
//                        val firstChoice = choicesArray.getJSONObject(0)
//                        if (firstChoice.has("message")) {
//                            return firstChoice.getJSONObject("message").getString("content")
//                        } else if (firstChoice.has("delta") && firstChoice.getJSONObject("delta")
//                                .has("content")
//                        ) {
//                            return firstChoice.getJSONObject("delta").getString("content")
//                        }
//                    }
//                }
//            } catch (_: Exception) { /* 忽略单行解析错误 */
//            }
//        }
//        null
//    } catch (e: Exception) {
//        println("提取内容时出错: ${e.message}")
//        null
//    }
//}